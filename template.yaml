AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9
  Recipe Crate
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900
    MemorySize: 256

Parameters:
  #This should be copy pasted to all the SAM App you are making 
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - test
      - prod

Resources:
  RecipeCrateApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: !Sub ${Environment} Api for Recipe Crate App
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Sub ${Environment}-recipe-crate-api
  
  RestApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt RecipeCrateFunction.Arn
  
  RestApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Description: Default API key for Recipe Crate API
      Name: !Sub ${Environment}-recipe-crate-api-key
      Enabled: true
      

  OpenAiRestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RecipeCrateApi.RootResourceId
      RestApiId: !Ref RecipeCrateApi
      PathPart: 'openai'

  RestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref OpenAiRestApiResource
      RestApiId: !Ref RecipeCrateApi
      PathPart: '{variable}'
  
  RestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: 'NONE'
      ApiKeyRequired: true
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt RestApiIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RecipeCrateFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref RestApiResource
      RestApiId: !Ref RecipeCrateApi
  
  
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RestApiMethod
    Properties:
      RestApiId: !Ref RecipeCrateApi
      Description: Recipe Crate API Deployment v1

  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref RestApiDeployment
      Description: Recipe Crate API Stage v1
      RestApiId: !Ref RecipeCrateApi
      StageName: !Ref ApiStageName
  

  RestApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref RecipeCrateApi
          Stage: !Ref RestApiStage
      Description: Usage plan for Nexus API
      Quota:
        Limit: 50000
        Offset: 0
        Period: DAY
      Throttle:
        BurstLimit: 1000
        RateLimit: 1000
      UsagePlanName: !Sub ${Environment}-recipe-crate-usage-plan
  
  RestApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref RestApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RestApiUsagePlan

  RecipeCrateSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Environment}-app-recipe-crate
      SecretString: '{"OPENAI_API_KEY_1" : ""}'
      Description: Api keys and other secrets for Recipe Crate GPT app (fill in using CLI or console). Format should be "OPENAI_API_KEY_1" , 2, 3, etc

      

  RecipeCrateFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      FunctionName: !Sub ${Environment}-recipe-crate-function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: python3.10-v1
  
  RecipeCrateFunctionApiInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "RecipeCrate.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RecipeCrateApi}/*"
    

Outputs:
  RestApiInvokeURL:
    Value: !Sub "https://${RecipeCrateApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"
  LambdaARN:
    Value: !GetAtt "RecipeCrateFunction.Arn"